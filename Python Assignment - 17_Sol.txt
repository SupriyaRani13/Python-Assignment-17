Python Assignment - 17

1. Assign the value 7 to the variable guess_me. Then, write the conditional tests (if, else, and elif) to
print the string 'too low' if guess_me is less than 7, 'too high' if greater than 7, and 'just right' if equal
to 7.

Sol: Eg - guess_me = 7

if guess_me < 7:
    print('too low')
elif guess_me > 7:
    print('too high')
else:
    print('just right')


In this code, we first assign the value 7 to the variable guess_me. Then, we use the if, elif (short for "else if"), and else statements to check different conditions. If guess_me is less than 7, it prints 'too low'. If it's greater than 7, it prints 'too high'. If it's equal to 7, it prints 'just right'.


2. Assign the value 7 to the variable guess_me and the value 1 to the variable start. Write a while
loop that compares start with guess_me. Print too low if start is less than guess me. If start equals
guess_me, print 'found it' and exit the loop. If start is greater than guess_me, print "oops" and exit
the loop. Increment start at the end of the loop.

Sol: Eg- guess_me = 7
         start = 1

while start <= guess_me:
    if start < guess_me:
        print('too low')
    elif start == guess_me:
        print('found it')
        break
    else:
        print('oops')
        break
    start += 1

In this code, we assign the values 7 and 1 to the variables guess_me and start, respectively. Then, we use a while loop to iterate while start is less than or equal to guess_me. Inside the loop, we use conditional statements to check the different cases. If start is less than guess_me, it prints 'too low'. If start is equal to guess_me, it prints 'found it' and exits the loop using the break statement. If start is greater than guess_me, it prints 'oops' and exits the loop using the break statement. Finally, at the end of each iteration, start is incremented by 1.


3. Print the following values of the list [3, 2, 1, 0] using a for loop.

Sol: Eg - my_list = [3, 2, 1, 0]

          for value in my_list:
             print(value)

  Output: 3
          2
          1
          0


4. Use a list comprehension to make a list of the even numbers in range(10)

Sol: We can use a list comprehension to create a list of even numbers in the range from 0 to 9 (inclusive):-

   Eg - even_numbers = [x for x in range(10) if x % 2 == 0]
        print(even_numbers)

   This code creates a list even_numbers using a list comprehension. It iterates over the range from 0 to 9 and includes only the numbers 
   that are divisible by 2 (i.e., even numbers). The resulting list will contain [0, 2, 4, 6, 8].


5. Use a dictionary comprehension to create the dictionary squares. Use range(10) to return the
   keys, and use the square of each key as its value.

Sol: We can use a dictionary comprehension to create the squares dictionary where the keys are numbers from 0 to 9 (inclusive), and the values 
     are the squares of each key:-

    Eg - squares = {x: x**2 for x in range(10)}
         print(squares)

    Output: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}

   In this code, the dictionary comprehension iterates over the range from 0 to 9 and creates key-value pairs where the key is the number x and 
   the value is the square of x (i.e., x**2). 


6. Construct the set odd from the odd numbers in the range using a set comprehension (10).

Sol: We can use a set comprehension to create the set odd containing odd numbers from the range 0 to 9 (inclusive):-

    Eg - odd = {x for x in range(10) if x % 2 != 0}
         print(odd)

  In this code, the set comprehension iterates over the range from 0 to 9 and includes only the numbers that are not divisible 
  by 2 (i.e., odd numbers). The resulting set will contain the odd numbers {1, 3, 5, 7, 9}.


7. Use a generator comprehension to return the string "Got" and a number for the numbers in
   range(10). Iterate through this by using a for loop.

Sol: We can use a generator comprehension to create a sequence of strings in the format 'Got <number>' for the numbers in the range from 
     0 to 9 (inclusive), and then iterate through this sequence using a for loop:-

   Eg - generator = ('Got ' + str(x) for x in range(10))

        for item in generator:
          print(item)

Output: Got 0
        Got 1
        Got 2
        Got 3
        Got 4
        Got 5
        Got 6
        Got 7
        Got 8
        Got 9

    In this code, the generator comprehension creates a sequence of strings by concatenating 'Got ' with each number from the range.
    The for loop then iterates through the generator and prints each item.


8. Define a function called good that returns the list ["Harry", "Ron", "Hermione"].

Sol: We can define the good function that returns the list ["Harry", "Ron", "Hermione"]:-

   Eg - def good():
        return ["Harry", "Ron", "Hermione"]

       # Call the function and store the result in a variable
       characters = good()

       # Print the result
       print(characters)

   When We run this code, the function good() will return the list ["Harry", "Ron", "Hermione"], and the result will be stored in 
   the characters variable and printed.

9. Define a generator function called get_odds that returns the odd numbers from range(10). Use a
   for loop to find and print the third value returned.

Sol: We can define the get_odds generator function that returns the odd numbers from the range 0 to 9 (inclusive) and then use a for loop 
     to find and print the third value returned:-

 Eg -  def get_odds():
         for number in range(10):
            if number % 2 != 0:
               yield number

# Iterate through the generator using a for loop
for index, value in enumerate(get_odds()):
    if index == 2:  # The third value (index 2)
        print(value)
        break  # Exit the loop after finding the third value

In this code, the get_odds generator function yields odd numbers from the range 0 to 9. The enumerate function is used to keep track of the index while iterating through the generator. When the index reaches 2 (which corresponds to the third value), the loop prints the value and then breaks to exit the loop. The output will be the third odd number, which is 5.


10. Define an exception called OopsException. Raise this exception to see what happens. Then write
    the code to catch this exception and print "Caught an oops"

Sol: We can define the OopsException exception, raise it, and then catch it using a try-except block to print "Caught an oops":-

   Eg - class OopsException(Exception):
    pass

try:
    raise OopsException("Something went wrong!")
except OopsException as e:
    print("Caught an oops:", e)


   In this code, we first define the OopsException exception by creating a class that inherits from the built-in Exception class. 
   Then, we use a try-except block to raise the OopsException with a custom error message. The except block catches the OopsException 
   and prints the specified message along with the error details.

   Output: Caught an oops: Something went wrong!



11. Use zip() to make a dictionary called movies that pairs these lists: titles = ["Creature of Habit",
    "Crewel Fate"] and plots = ["A nun turns into a monster", "A haunted yarn shop"].

Sol: We can use the zip() function to pair the titles and plots lists and create a dictionary called movies.

   Eg - titles = ["Creature of Habit", "Crewel Fate"]
        plots = ["A nun turns into a monster", "A haunted yarn shop"]

        movies = dict(zip(titles, plots))
        print(movies)

In this code, zip(titles, plots) pairs elements from the titles and plots lists, and then dict() is used to create a dictionary from these pairs. 

   Output: {'Creature of Habit': 'A nun turns into a monster', 'Crewel Fate': 'A haunted yarn shop'}























































































































